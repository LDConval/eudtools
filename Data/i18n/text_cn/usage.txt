基本用法：

1. 左边选择框里选需要改的内容
2. 需要改的单位ID写在【物体】框里
这个ID可以在右边选择对应的种类ctrl+F搜索
3. 需要改的数值写在【数值】框里
4. 点数值框右边的按钮生成触发
5. 把触发复制到SCMD里编译使用


高级用法：

点击这个文本框右下角放大（或者拉大）


设置内容：

触发格式：可以选SCMD或者TEP或者EUD3的格式
TEP需要1.0以上的版本支持SetMemoryX的
EUD3可以用代码编辑器，或者0.12版填进代码框里用

数字格式：可以选十进制和十六进制

语言：点英文可以换成英语


特殊用法：

数值框里填字符串，用双引号括起来，可以转换字符串为数字输出
比如 "map test"
会自动在字符串后面添加\x00

十六进制串用单引号括起来
比如 '41 72 33 73 67 69 63 65'

物体框里填多个数字用逗号隔开可以同时改多个物体
如 3,4,5,17,18,19


按钮和需求：

改按钮可以用【工具链接】里的【按钮编辑器】

按钮编辑器用法：
1. 第一二排改按钮
2. 点击生成JSON
3. 生成JSON后可以保存起来 粘贴在那个框里就会读取
4. 点击生成触发

注意生成触发上面那个按钮偏移量 这个是不能重复的
一次生成后它会告诉你下一次到了哪里 下次用新的偏移量生成触发

还有就是按钮一定要按位置排个序 顺序不对是不能用的

左下角重定向是让一个单位用另一个单位的按钮
这个主要用来半途改按钮 先把按钮做给另一个单位，然后转接过去
因为重定向就只有两条action 试一下很容易看出来


改需求，建议不要用这个改，在EUD editor 3里改
不然用EUD3编译过后会不兼容导致两边都不能用


IceCC编译器：

这个在重制版里是不能用的 1.08EUD的东西
不过写都写了 我还是留下了


EUD1.08转换器：

可以转换所有dat属性，按钮，升级，需求
插件编号必须是和SMC默认的编号一致 不一致的话自己用编辑器替换一下

SMC触发转SCMD触发 转完贴进SCMD不要贴回SMC
然后需求的部分因为上面的原因建议转换了也不要用，会和EUD3冲突


修改按钮字符串：

1. 先点上面的CPT 会生成一大串触发 先把这些放进SCMD里
默认条件是switch164 不需要的话可以直接删了 或者写个Always();
2. 注意里面有一行注释写着PUT YOUR STRING EDIT TRIGGERS HERE
3. 在下面那个部分填上需要改的字符串编号和字符串内容 需要一次改两个
4. 点右下角生成触发 生成的触发放进第二条说的那个注释的地方
5. 如果生成太多导致超过64个actions，可以用触发切割器切割

偏移量每次生成会自动增加 这个也是不能重复的

选UTF8编码的话有时候游戏里是会乱码的
因为星际重制版对显示字符串是优先utf8=>euc-kr=>iso8859-1
但是对按钮字符串是优先euc-kr=>utf8=>iso8859-1

所以如果你的字符串能被韩文解码成功就会被当成韩文
但是由于实际上是utf8 就导致乱码了

一个方法是在每个字符串里添加<200C>（即U+200C）
这个在utf8编码后属于韩文解码不了的字符 但是utf8解码是空的
这样游戏就会用utf8解码整个字符串了


另外关于这里说到的CPT
这个是指所谓的Current Player Trick
原本EUD地址只能指向固定的偏移量（EPD）

但是有个例外就是修改当前玩家的death count
而当前玩家这个数值本身是可以被修改的
所以这个数值就被拿来当成指针修改动态的地址
也就是为什么这里生成出来的触发会有一堆奇怪的东西混进去


触发复读机：

这个准确来说和EUD没什么关系
功能是把一个触发重复n次，其中一些部分每次按照规律变化
[1]或者[1;2]是等差数列
[^]或者[^1;2]是等比数列
[$array1]是数组 数组内容看右边的格式
[=i]是执行代码
[#]是二进制开关
[=EUD(内存，长度，物体编号，数值)]可以生成EUD触发